values = getValues(site, variable, startDate, endDate)
plot(DataValue~time, data=values, type="l", col="black")
legend(x="topright",
legend=c(paste(site, variable)),
lty=c(1),
lwd=c(1),
col=c("black"), inset=c(0.01,0.02))
#example R-script for plotting values from HydroServer
#this example compares temperature in last month at 5cm and 30cm depth
#to run this script, you must install the XML package
library(XML)
#this function gets the WaterML XML from Hydroserver and converts it
#to a data frame
#this function should be moved to a package
#TODO: add error checking
getValues <- function(site, variable, startDate, endDate) {
base_url = "http://worldwater.byu.edu/interactive/rushvalley/services/index.php/cuahsi_1_1.asmx/GetValuesObject"
network = "WWO"
url = paste(base_url, "?location=", network, ":", site,
"&variable=", network, ":", variable, sep="",
"&startDate=",startDate, "&endDate=",endDate)
text = getURL(url)
doc = xmlRoot(xmlTreeParse(text, getDTD=FALSE, useInternalNodes = TRUE))
variable <- xmlToList(doc[[2]][[2]])
noData <- as.numeric(variable$noDataValue)
vals <- doc[[2]][[3]]
valCount = xmlSize(vals)
xmNames = xmlSApply(vals, xmlName)
val = c()
dt = c()
for (j in 1:valCount){
if(xmlName(vals[[j]]) == 'value') {
dt[j] <- xmlAttrs(vals[[j]])["dateTime"]
val[j] <- as.numeric(xmlValue(vals[[j]]))
}
}
df <- data.frame("time"=as.POSIXct(dt), "DataValue"=val)
df[df$DataValue == noData,2] <- NA
df$Date <- as.Date(as.POSIXct(df$time))
return(df)
}
##############################################
# Change these values to get a different plot#
##############################################
site = "Ru1BMPA"
variable = "SRS_Nr_NDVI_sixthirty"
startDate = "2014-11-01"
endDate = "2014-11-19"
values = getValues(site, variable, startDate, endDate)
plot(DataValue~time, data=values, type="l", col="black")
legend(x="topright",
legend=c(paste(site, variable)),
lty=c(1),
lwd=c(1),
col=c("black"), inset=c(0.01,0.02))
#example R-script for plotting values from HydroServer
#this example compares temperature in last month at 5cm and 30cm depth
#to run this script, you must install the XML package
library(XML)
#this function gets the WaterML XML from Hydroserver and converts it
#to a data frame
#this function should be moved to a package
#TODO: add error checking
getValues <- function(site, variable, startDate, endDate) {
base_url = "http://worldwater.byu.edu/interactive/rushvalley/services/index.php/cuahsi_1_1.asmx/GetValuesObject"
network = "WWO"
url = paste(base_url, "?location=", network, ":", site,
"&variable=", network, ":", variable, sep="",
"&startDate=",startDate, "&endDate=",endDate)
text = getURL(url)
doc = xmlRoot(xmlTreeParse(text, getDTD=FALSE, useInternalNodes = TRUE))
variable <- xmlToList(doc[[2]][[2]])
noData <- as.numeric(variable$noDataValue)
vals <- doc[[2]][[3]]
valCount = xmlSize(vals)
xmNames = xmlSApply(vals, xmlName)
val = c()
dt = c()
for (j in 1:valCount){
if(xmlName(vals[[j]]) == 'value') {
dt[j] <- xmlAttrs(vals[[j]])["dateTime"]
val[j] <- as.numeric(xmlValue(vals[[j]]))
}
}
df <- data.frame("time"=as.POSIXct(dt), "DataValue"=val)
df[df$DataValue == noData,2] <- NA
df$Date <- as.Date(as.POSIXct(df$time))
return(df)
}
##############################################
# Change these values to get a different plot#
##############################################
site = "Ru1BMPA"
variable = "SRS_Nr_NDVI_eighthundred"
startDate = "2014-11-01"
endDate = "2014-11-19"
values = getValues(site, variable, startDate, endDate)
plot(DataValue~time, data=values, type="l", col="black")
legend(x="topright",
legend=c(paste(site, variable)),
lty=c(1),
lwd=c(1),
col=c("black"), inset=c(0.01,0.02))
#example R-script for plotting values from HydroServer
#this example compares temperature in last month at 5cm and 30cm depth
#to run this script, you must install the XML package
library(XML)
#this function gets the WaterML XML from Hydroserver and converts it
#to a data frame
#this function should be moved to a package
#TODO: add error checking
getValues <- function(site, variable, startDate, endDate) {
base_url = "http://worldwater.byu.edu/interactive/rushvalley/services/index.php/cuahsi_1_1.asmx/GetValuesObject"
network = "WWO"
url = paste(base_url, "?location=", network, ":", site,
"&variable=", network, ":", variable, sep="",
"&startDate=",startDate, "&endDate=",endDate)
text = getURL(url)
doc = xmlRoot(xmlTreeParse(text, getDTD=FALSE, useInternalNodes = TRUE))
variable <- xmlToList(doc[[2]][[2]])
noData <- as.numeric(variable$noDataValue)
vals <- doc[[2]][[3]]
valCount = xmlSize(vals)
xmNames = xmlSApply(vals, xmlName)
val = c()
dt = c()
for (j in 1:valCount){
if(xmlName(vals[[j]]) == 'value') {
dt[j] <- xmlAttrs(vals[[j]])["dateTime"]
val[j] <- as.numeric(xmlValue(vals[[j]]))
}
}
df <- data.frame("time"=as.POSIXct(dt), "DataValue"=val)
df[df$DataValue == noData,2] <- NA
df$Date <- as.Date(as.POSIXct(df$time))
return(df)
}
##############################################
# Change these values to get a different plot#
##############################################
site = "Ru1BMPA"
variable = "SRS_Nr_NDVI"
startDate = "2014-11-01"
endDate = "2014-11-19"
values = getValues(site, variable, startDate, endDate)
plot(DataValue~time, data=values, type="l", col="black")
legend(x="topright",
legend=c(paste(site, variable)),
lty=c(1),
lwd=c(1),
col=c("black"), inset=c(0.01,0.02))
#example R-script for plotting values from HydroServer
#this example compares temperature in last month at 5cm and 30cm depth
#to run this script, you must install the XML package
library(XML)
#this function gets the WaterML XML from Hydroserver and converts it
#to a data frame
#this function should be moved to a package
#TODO: add error checking
getValues <- function(site, variable, startDate, endDate) {
base_url = "http://worldwater.byu.edu/interactive/rushvalley/services/index.php/cuahsi_1_1.asmx/GetValuesObject"
network = "WWO"
url = paste(base_url, "?location=", network, ":", site,
"&variable=", network, ":", variable, sep="",
"&startDate=",startDate, "&endDate=",endDate)
text = getURL(url)
doc = xmlRoot(xmlTreeParse(text, getDTD=FALSE, useInternalNodes = TRUE))
variable <- xmlToList(doc[[2]][[2]])
noData <- as.numeric(variable$noDataValue)
vals <- doc[[2]][[3]]
valCount = xmlSize(vals)
xmNames = xmlSApply(vals, xmlName)
val = c()
dt = c()
for (j in 1:valCount){
if(xmlName(vals[[j]]) == 'value') {
dt[j] <- xmlAttrs(vals[[j]])["dateTime"]
val[j] <- as.numeric(xmlValue(vals[[j]]))
}
}
df <- data.frame("time"=as.POSIXct(dt), "DataValue"=val)
df[df$DataValue == noData,2] <- NA
df$Date <- as.Date(as.POSIXct(df$time))
return(df)
}
##############################################
# Change these values to get a different plot#
##############################################
site = "Ru1BMP5"
variable = "GS3_WaterTemp"
startDate = "2014-11-01"
endDate = "2014-11-19"
values = getValues(site, variable, startDate, endDate)
plot(DataValue~time, data=values, type="l", col="black")
legend(x="topright",
legend=c(paste(site, variable)),
lty=c(1),
lwd=c(1),
col=c("black"), inset=c(0.01,0.02))
#example R-script for plotting values from HydroServer
#this example compares temperature in last month at 5cm and 30cm depth
#to run this script, you must install the XML package
library(XML)
#this function gets the WaterML XML from Hydroserver and converts it
#to a data frame
#this function should be moved to a package
#TODO: add error checking
getValues <- function(site, variable, startDate, endDate) {
base_url = "http://worldwater.byu.edu/interactive/rushvalley/services/index.php/cuahsi_1_1.asmx/GetValuesObject"
network = "WWO"
url = paste(base_url, "?location=", network, ":", site,
"&variable=", network, ":", variable, sep="",
"&startDate=",startDate, "&endDate=",endDate)
text = getURL(url)
doc = xmlRoot(xmlTreeParse(text, getDTD=FALSE, useInternalNodes = TRUE))
variable <- xmlToList(doc[[2]][[2]])
noData <- as.numeric(variable$noDataValue)
vals <- doc[[2]][[3]]
valCount = xmlSize(vals)
xmNames = xmlSApply(vals, xmlName)
val = c()
dt = c()
for (j in 1:valCount){
if(xmlName(vals[[j]]) == 'value') {
dt[j] <- xmlAttrs(vals[[j]])["dateTime"]
val[j] <- as.numeric(xmlValue(vals[[j]]))
}
}
df <- data.frame("time"=as.POSIXct(dt), "DataValue"=val)
df[df$DataValue == noData,2] <- NA
df$Date <- as.Date(as.POSIXct(df$time))
return(df)
}
##############################################
# Change these values to get a different plot#
##############################################
site = "Ru1BMP5"
variable = "GS3_Moisture_Temp"
startDate = "2014-11-01"
endDate = "2014-11-19"
values = getValues(site, variable, startDate, endDate)
plot(DataValue~time, data=values, type="l", col="black")
legend(x="topright",
legend=c(paste(site, variable)),
lty=c(1),
lwd=c(1),
col=c("black"), inset=c(0.01,0.02))
#example R-script for plotting values from HydroServer
#this example compares temperature in last month at 5cm and 30cm depth
#to run this script, you must install the XML package
library(XML)
#this function gets the WaterML XML from Hydroserver and converts it
#to a data frame
#this function should be moved to a package
#TODO: add error checking
getValues <- function(site, variable, startDate, endDate) {
base_url = "http://worldwater.byu.edu/interactive/rushvalley/services/index.php/cuahsi_1_1.asmx/GetValuesObject"
network = "WWO"
url = paste(base_url, "?location=", network, ":", site,
"&variable=", network, ":", variable, sep="",
"&startDate=",startDate, "&endDate=",endDate)
text = getURL(url)
doc = xmlRoot(xmlTreeParse(text, getDTD=FALSE, useInternalNodes = TRUE))
variable <- xmlToList(doc[[2]][[2]])
noData <- as.numeric(variable$noDataValue)
vals <- doc[[2]][[3]]
valCount = xmlSize(vals)
xmNames = xmlSApply(vals, xmlName)
val = c()
dt = c()
for (j in 1:valCount){
if(xmlName(vals[[j]]) == 'value') {
dt[j] <- xmlAttrs(vals[[j]])["dateTime"]
val[j] <- as.numeric(xmlValue(vals[[j]]))
}
}
df <- data.frame("time"=as.POSIXct(dt), "DataValue"=val)
df[df$DataValue == noData,2] <- NA
df$Date <- as.Date(as.POSIXct(df$time))
return(df)
}
##############################################
# Change these values to get a different plot#
##############################################
site = "Ru1BMP5"
variable = "GS3_Moisture_VWC"
startDate = "2014-11-01"
endDate = "2014-11-19"
values = getValues(site, variable, startDate, endDate)
plot(DataValue~time, data=values, type="l", col="black")
legend(x="topright",
legend=c(paste(site, variable)),
lty=c(1),
lwd=c(1),
col=c("black"), inset=c(0.01,0.02))
#example R-script for plotting values from HydroServer
#this example compares temperature in last month at 5cm and 30cm depth
#to run this script, you must install the XML package
library(XML)
#this function gets the WaterML XML from Hydroserver and converts it
#to a data frame
#this function should be moved to a package
#TODO: add error checking
getValues <- function(site, variable, startDate, endDate) {
base_url = "http://worldwater.byu.edu/interactive/rushvalley/services/index.php/cuahsi_1_1.asmx/GetValuesObject"
network = "WWO"
url = paste(base_url, "?location=", network, ":", site,
"&variable=", network, ":", variable, sep="",
"&startDate=",startDate, "&endDate=",endDate)
text = getURL(url)
doc = xmlRoot(xmlTreeParse(text, getDTD=FALSE, useInternalNodes = TRUE))
variable <- xmlToList(doc[[2]][[2]])
noData <- as.numeric(variable$noDataValue)
vals <- doc[[2]][[3]]
valCount = xmlSize(vals)
xmNames = xmlSApply(vals, xmlName)
val = c()
dt = c()
for (j in 1:valCount){
if(xmlName(vals[[j]]) == 'value') {
dt[j] <- xmlAttrs(vals[[j]])["dateTime"]
val[j] <- as.numeric(xmlValue(vals[[j]]))
}
}
df <- data.frame("time"=as.POSIXct(dt), "DataValue"=val)
df[df$DataValue == noData,2] <- NA
df$Date <- as.Date(as.POSIXct(df$time))
return(df)
}
##############################################
# Change these values to get a different plot#
##############################################
site = "Ru1BMP5"
variable = "GS3_Moisture_EC"
startDate = "2014-11-01"
endDate = "2014-11-19"
values = getValues(site, variable, startDate, endDate)
plot(DataValue~time, data=values, type="l", col="black")
legend(x="topright",
legend=c(paste(site, variable)),
lty=c(1),
lwd=c(1),
col=c("black"), inset=c(0.01,0.02))
#example R-script for plotting values from HydroServer
#this example compares temperature in last month at 5cm and 30cm depth
#to run this script, you must install the XML package
library(XML)
#this function gets the WaterML XML from Hydroserver and converts it
#to a data frame
#this function should be moved to a package
#TODO: add error checking
getValues <- function(site, variable, startDate, endDate) {
base_url = "http://worldwater.byu.edu/interactive/rushvalley/services/index.php/cuahsi_1_1.asmx/GetValuesObject"
network = "WWO"
url = paste(base_url, "?location=", network, ":", site,
"&variable=", network, ":", variable, sep="",
"&startDate=",startDate, "&endDate=",endDate)
text = getURL(url)
doc = xmlRoot(xmlTreeParse(text, getDTD=FALSE, useInternalNodes = TRUE))
variable <- xmlToList(doc[[2]][[2]])
noData <- as.numeric(variable$noDataValue)
vals <- doc[[2]][[3]]
valCount = xmlSize(vals)
xmNames = xmlSApply(vals, xmlName)
val = c()
dt = c()
for (j in 1:valCount){
if(xmlName(vals[[j]]) == 'value') {
dt[j] <- xmlAttrs(vals[[j]])["dateTime"]
val[j] <- as.numeric(xmlValue(vals[[j]]))
}
}
df <- data.frame("time"=as.POSIXct(dt), "DataValue"=val)
df[df$DataValue == noData,2] <- NA
df$Date <- as.Date(as.POSIXct(df$time))
return(df)
}
##############################################
# Change these values to get a different plot#
##############################################
site = "Ru1BMNU"
variable = "SRS_Nr_NDVI_sixthirty"
startDate = "2014-11-01"
endDate = "2014-11-19"
values = getValues(site, variable, startDate, endDate)
plot(DataValue~time, data=values, type="l", col="black")
legend(x="topright",
legend=c(paste(site, variable)),
lty=c(1),
lwd=c(1),
col=c("black"), inset=c(0.01,0.02))
#example R-script for plotting values from HydroServer
#this example compares temperature in last month at 5cm and 30cm depth
#to run this script, you must install the XML package
library(XML)
#this function gets the WaterML XML from Hydroserver and converts it
#to a data frame
#this function should be moved to a package
#TODO: add error checking
getValues <- function(site, variable, startDate, endDate) {
base_url = "http://worldwater.byu.edu/interactive/rushvalley/services/index.php/cuahsi_1_1.asmx/GetValuesObject"
network = "WWO"
url = paste(base_url, "?location=", network, ":", site,
"&variable=", network, ":", variable, sep="",
"&startDate=",startDate, "&endDate=",endDate)
text = getURL(url)
doc = xmlRoot(xmlTreeParse(text, getDTD=FALSE, useInternalNodes = TRUE))
variable <- xmlToList(doc[[2]][[2]])
noData <- as.numeric(variable$noDataValue)
vals <- doc[[2]][[3]]
valCount = xmlSize(vals)
xmNames = xmlSApply(vals, xmlName)
val = c()
dt = c()
for (j in 1:valCount){
if(xmlName(vals[[j]]) == 'value') {
dt[j] <- xmlAttrs(vals[[j]])["dateTime"]
val[j] <- as.numeric(xmlValue(vals[[j]]))
}
}
df <- data.frame("time"=as.POSIXct(dt), "DataValue"=val)
df[df$DataValue == noData,2] <- NA
df$Date <- as.Date(as.POSIXct(df$time))
return(df)
}
##############################################
# Change these values to get a different plot#
##############################################
site = "Ru1BMNU"
variable = "SRS_Nr_NDVI_eighthundred"
startDate = "2014-11-01"
endDate = "2014-11-19"
values = getValues(site, variable, startDate, endDate)
plot(DataValue~time, data=values, type="l", col="black")
legend(x="topright",
legend=c(paste(site, variable)),
lty=c(1),
lwd=c(1),
col=c("black"), inset=c(0.01,0.02))
#example R-script for plotting values from HydroServer
#this example compares temperature in last month at 5cm and 30cm depth
#to run this script, you must install the XML package
library(XML)
#this function gets the WaterML XML from Hydroserver and converts it
#to a data frame
#this function should be moved to a package
#TODO: add error checking
getValues <- function(site, variable, startDate, endDate) {
base_url = "http://worldwater.byu.edu/interactive/rushvalley/services/index.php/cuahsi_1_1.asmx/GetValuesObject"
network = "WWO"
url = paste(base_url, "?location=", network, ":", site,
"&variable=", network, ":", variable, sep="",
"&startDate=",startDate, "&endDate=",endDate)
text = getURL(url)
doc = xmlRoot(xmlTreeParse(text, getDTD=FALSE, useInternalNodes = TRUE))
variable <- xmlToList(doc[[2]][[2]])
noData <- as.numeric(variable$noDataValue)
vals <- doc[[2]][[3]]
valCount = xmlSize(vals)
xmNames = xmlSApply(vals, xmlName)
val = c()
dt = c()
for (j in 1:valCount){
if(xmlName(vals[[j]]) == 'value') {
dt[j] <- xmlAttrs(vals[[j]])["dateTime"]
val[j] <- as.numeric(xmlValue(vals[[j]]))
}
}
df <- data.frame("time"=as.POSIXct(dt), "DataValue"=val)
df[df$DataValue == noData,2] <- NA
df$Date <- as.Date(as.POSIXct(df$time))
return(df)
}
##############################################
# Change these values to get a different plot#
##############################################
site = "Ru1BMNU"
variable = "SRS_Nr_NDVI"
startDate = "2014-11-01"
endDate = "2014-11-19"
values = getValues(site, variable, startDate, endDate)
plot(DataValue~time, data=values, type="l", col="black")
legend(x="topright",
legend=c(paste(site, variable)),
lty=c(1),
lwd=c(1),
col=c("black"), inset=c(0.01,0.02))
install.packages("devtools")
library("devtools")
install.packages("Rtools")
install.packages("devtools")
library(devtools)
find_rtools()
library(devtools)
devtools::install_github("klutometis/roxygen")
setwd("C:/dev/github/rushvalley")
create("cats")
setwd("./cats")
document()
setwd("..")
install("cats")
install("cats")
?cat_function
install.packages("HydroR")
a =(10 ^ (1037 / 480)) / 10000
a
0.4488/0.3366
alpha = 0.4488/0.3366
red = 0.0099
nir = 0.0113
ndvi = (alpha * nir - red)/(alpha * nir + red)
ndvi
